#include <SPI.h>
#include <MFRC522.h>
#include <Servo.h>

#define SS_PIN 10
#define RST_PIN 9
#define RED_LED_PIN 4    // Red LED pin
#define GREEN_LED_PIN 3  // Green LED pin
#define SERVO_PIN 6      // Servo pin

MFRC522 mfrc522(SS_PIN, RST_PIN);
Servo myServo;

// Define the target UID of the card to detect
byte targetUID[] = {0x92, 0xEF, 0xA8, 0x00}; // UID ng keychain

void setup() {
    Serial.begin(9600);
    SPI.begin();
    mfrc522.PCD_Init();
    
    // Initialize servo
    myServo.attach(SERVO_PIN);
    myServo.write(0);   // Start at 0 degrees
    
    // Initialize LED pins
    pinMode(RED_LED_PIN, OUTPUT);
    pinMode(GREEN_LED_PIN, OUTPUT);
    
    Serial.println("RC522 RFID Ready. Scan a card...");
}

void loop() {
    // Reset LEDs
    digitalWrite(RED_LED_PIN, LOW);
    digitalWrite(GREEN_LED_PIN, LOW);
    
    if (!mfrc522.PICC_IsNewCardPresent() || !mfrc522.PICC_ReadCardSerial()) {
        return;
    }
    
    Serial.println("âœ… Scan Detected!");
    Serial.print("ðŸ“Œ Card UID:");
    for (byte i = 0; i < mfrc522.uid.size; i++) {
        Serial.print(" ");
        Serial.print(mfrc522.uid.uidByte[i], HEX);
    }
    Serial.println();
    
    // Check if the UID matches the target
    if (compareUID(mfrc522.uid.uidByte, targetUID, 4)) {
        // Correct UID - Green LED and Servo Rotation
        digitalWrite(GREEN_LED_PIN, HIGH);
        
        // Slowly rotate servo to 90 degrees
        for (int pos = 0; pos <= 90; pos += 1) {
            myServo.write(pos);
            delay(15);  // Slower rotation
        }
        
        // Wait a moment
        delay(2000);
        
        // Slowly return to original position
        for (int pos = 90; pos >= 0; pos -= 1) {
            myServo.write(pos);
            delay(15);  // Slower rotation
        }
    } else {
        // Incorrect UID - Red LED
        digitalWrite(RED_LED_PIN, HIGH);
        delay(1000);
    }
    
    mfrc522.PICC_HaltA();  // Halt the card
}

// Function to compare two UID arrays
bool compareUID(byte *uid1, byte *uid2, byte length) {
    for (byte i = 0; i < length; i++) {
        if (uid1[i] != uid2[i]) {
            return false;
        }
    }
    return true;
}


